@page

@using System.IO

@model Server.Pages.FileManager.Step01.IndexModel

@{
	// if (Model is null)
	// {
	// 	return;
	// }

	Layout = "Layouts/_LayoutFileManager";
}

<h5>
	Current Path: @(Model.CurrentPath)
</h5>

<div class="row">
	<div class="col table-responsive">
		<table class="table table-bordered table-sm table-striped table-hover">
			<caption>Directories</caption>

			<thead class="table-primary">
				<tr>
					<th scope="col">
						#
					</th>
					<th scope="col">
						Name
					</th>
					<th scope="col">
						Contents
					</th>
					<th scope="col">
						Attributes
					</th>
					<th scope="col">
						Creation Time
					</th>
					<th scope="col">
						Last Write Time
					</th>
					<th scope="col">
						Last Access Time
					</th>
				</tr>
			</thead>

			<tbody>
				@for (var index = 0; index <= Model.Directories.Count - 1; index++)
				{
					var item = Model.Directories[index];
					var path = $"{Model.CurrentPath}{item.Name}";

					<tr>
						<th scope="row">
							@(index + 1)
						</th>
						<td>
							<i class="bi bi-folder"></i>

							<a href="@(Model.RootRelativePageAddress)?path=@(path)" class="text-decoration-none">
								@(item.Name)
							</a>
						</td>
						<td>
							@(GetContentCount(directoryInfo: item))
						</td>
						<td>
							@(item.Attributes)
						</td>
						<td>
							@(item.CreationTime.ToString(format: Model.DisplayDateTimeFormat))
						</td>
						<td>
							@(item.LastWriteTime.ToString(format: Model.DisplayDateTimeFormat))
						</td>
						<td>
							@(item.LastAccessTime.ToString(format: Model.DisplayDateTimeFormat))
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

@{
	string GetContentCount(DirectoryInfo directoryInfo)
	{
		var fileCount = directoryInfo.GetFiles().Count();
		var directoryCount = directoryInfo.GetDirectories().Count();

		var contentCount = fileCount + directoryCount;

		var result = "[EMPTY]";

		if (contentCount != 0)
		{
			result = contentCount.ToString(format:"#,##0");
		}

		return result;
	}
}

<div class="row">
	<div class="col table-responsive">
		<table class="table table-bordered table-sm table-striped table-hover">
			<caption>Files</caption>

			<thead class="table-primary">
				<tr>
					<th scope="col">
						#
					</th>
					<th scope="col">
						Name
					</th>
					<th scope="col">
						Type
					</th scope="col">
					<th scope="col">
						Length
					</th>
					<th scope="col">
						Attributes
					</th>
					<th scope="col">
						Creation Time
					</th>
					<th scope="col">
						Last Write Time
					</th>
					<th scope="col">
						Last Access Time
					</th>
				</tr>
			</thead>

			<tbody>
				@{
					long totalLength = 0;

					for (var index = 0; index <= Model.Files.Count - 1; index++)
					{
						var item = Model.Files[index];
						var pathName = $"{Model.CurrentPath}{item.Name}";

						totalLength += item.Length;

						<tr>
							<th scope="row">
								@(index + 1)
							</th>
							<td>
								<a href="@(pathName)" class="text-decoration-none" target="_blank">
									@(item.Name)
								</a>
							</td>
							<td>
								@(item.Extension.ToLower())
							</td>
							<td>
								@(item.Length.ToString(format: "#,##0"))
							</td>
							<td>
								@(item.Attributes)
							</td>
							<td>
								@(item.CreationTime.ToString(format: Model.DisplayDateTimeFormat))
							</td>
							<td>
								@(item.LastWriteTime.ToString(format: Model.DisplayDateTimeFormat))
							</td>
							<td>
								@(item.LastAccessTime.ToString(format: Model.DisplayDateTimeFormat))
							</td>
						</tr>
					}
				}
			</tbody>

			<tfoot class="table-secondary">
				<tr>
					<th scope="col" colspan="8">
						Total Length:
						@(totalLength.ToString(format: "#,##0")) Bytes
						|
						@((totalLength / 1024).ToString(format: "#,##0")) KB
						|
						@((totalLength / (1024 * 1024)).ToString(format: "#,##0")) MB
					</th>
				</tr>
			</tfoot>
		</table>
	</div>
</div>
